# -*- coding: utf-8 -*-
"""Tugas AI LAB (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IC8zPsZBzzxL79_Lx8iAYKma7ewg9tiv
"""

class Kendaraan:
  def __init__(self, owner, noPlat, tahun):
    self.owner = owner
    self.noPlat = noPlat
    self.tahun = tahun

  def printInformasi(self):
    print("Owner: ", self.owner)
    print("No Plat: ", self.noPlat)
    print("Tahun: ", self.tahun)

  def hitungServiceCost(self):
    raise NotImplementedError("Subclass must implement abstract method")

  def get_owner(self):
    return self.owner

  def get_noPlat(self):
    return self.noPlat

  def get_tahun(self):
    return self.tahun


class Motocycle(Kendaraan):
    def __init__(self, owner, noPlat, tahun, ccMotor):
      super().__init__(owner, noPlat, tahun)
      self.ccMotor = ccMotor

    def hitungServiceCost(self):
      return (self.ccMotor / 100) * 50000


class Car(Kendaraan):
    def __init__(self, owner, noPlat, tahun, jumPintu):
      super().__init__(owner, noPlat, tahun)
      self.jumPintu = jumPintu

    def hitungServiceCost(self):
      return ((self.tahun % 10) + self.jumPintu) * 50000

class Truck(Kendaraan):
    def __init__(self, owner, noPlat, tahun, kapMuatan):
      super().__init__(owner, noPlat, tahun)
      self.kapMuatan = kapMuatan

    def hitungServiceCost(self):
      return (300000 * self.kapMuatan)

motor = Motocycle("shadra", "D 1234 AA", 2020, 150)
mobil = Car("mehdi", "D 2233 AD", 2018, 5)
truck = Truck("irfan", "D 2211 AF", 2014, 3)

print()

def printServiceDetails(kendaraanList):
    for kendaraan in kendaraanList:
        print("Owner:", kendaraan.get_owner(), "No Plat:", kendaraan.get_noPlat(), "Tahun:", kendaraan.get_tahun(), "Biaya Servis: Rp", kendaraan.hitungServiceCost())
        print("----------------------------------------------------------------------")

kendaraan = [motor, mobil, truck]
printServiceDetails(kendaraan)